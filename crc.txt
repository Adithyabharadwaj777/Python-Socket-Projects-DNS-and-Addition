import socket
def string_to_binary(data: str) -> str:
    return ''.join(format(ord(char), '08b') for char in data)

def xor(a: str, b: str) -> str:
    result = []
    for i in range(1, len(b)):
        result.append('0' if a[i] == b[i] else '1')
    return ''.join(result)

def mod2div(dividend: str, divisor: str) -> str:
    pick = len(divisor)
    tmp = dividend[0:pick]

    while pick < len(dividend):
        if tmp[0] == '1':
            tmp = xor(divisor, tmp) + dividend[pick]
        else:
            tmp = xor('0'*pick, tmp) + dividend[pick]
        pick += 1

    if tmp[0] == '1':
        tmp = xor(divisor, tmp)
    else:
        tmp = xor('0'*pick, tmp)

    return tmp

def encode_data(data: str, key: str) -> str:
    l_key = len(key)
    appended_data = data + '0'*(l_key-1)
    remainder = mod2div(appended_data, key)
    codeword = data + remainder
    return codeword

def verify_data(data: str, key: str) -> bool:
    remainder = mod2div(data, key)
    return '1' not in remainder


def send_data(data: str, key: str, host: str = 'localhost', port: int = 12345):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((host, port))

    binary_data = string_to_binary(data)
    encoded_data = encode_data(binary_data, key)

    client_socket.send(encoded_data.encode('utf-8'))
    client_socket.close()

def start_server(host: str = 'localhost', port: int = 12345):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(1)
    print(f"Server listening on {host}:{port}")

    while True:
        client_socket, addr = server_socket.accept()
        print(f"Connection from {addr}")

        encoded_data = client_socket.recv(1024).decode('utf-8')
        key = input("Enter the CRC key to verify the received data: ").strip()

        if verify_data(encoded_data, key):
            print("Data received correctly with no errors.")
        else:
            print("Data received with errors.")
        
        client_socket.close()

if __name__ == "__main__":
    role = input("Enter 'send' to act as sender or 'receive' to act as receiver: ").strip().lower()
    
    if role == 'send':
        data_to_send = input("Enter the data to send: ").strip()
        crc_key = input("Enter the CRC key: ").strip()
        send_data(data_to_send, crc_key)
    elif role == 'receive':
        start_server()
    else:
        print("Invalid role. Please enter 'send' or 'receive'.")
